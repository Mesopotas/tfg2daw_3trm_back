name: Docker Image CI/CD backend Coworking

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
env:
  EKS_CLUSTER_NAME: cluster-coworking
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Archivos del back
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Metadata for Image
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: jblas7/back-2-trimestre-2-daw
          flavor: |
            latest=false
          tags: |
            type=raw,value=00

      - name: Build and Push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: jblas7/back-2-trimestre-2-daw:v${{ github.run_number }} # ejemplo: jblas7/back-2-trimestre-2-daw:v12
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

    # IMPORTANTE, como en AWS academy las credenciales cambian cada vez que se lanza, la parte de AWS se dejará comentada hasta el momento que este todo preparado para lanzarlo
    # ahi se descomentará todo esto y se añadirán los secretos de las credenciales en el acto, haciendo que la autentificacion sea correcta y el propio github actions haga el despliege
    # continuo de forma totalmente automatizada, hasta entonces se dejará comentado para evitar errores

 #     - name: Configure AWS credentials
 #       uses: aws-actions/configure-aws-credentials@v1
 #       with:
 #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
 #          aws-region: ${{ env.AWS_REGION }}

 #      - name: Update kube config
  #       run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

  #     - name: Deploy to EKS
  #       run: |
   #        kubectl apply -f manifests/backend-deployment.yaml
   #        kubectl apply -f manifests/backend-svc.yaml
    #       kubectl apply -f manifests/https.yaml

